task pactsJar(type: Jar, dependsOn: testClasses) {
  classifier = 'test-pacts'
  into('jar-pacts') {
    from(sourceSets.test.output) {
      include 'test_pact_v3.json'
    }
  }
}

test.dependsOn pactsJar

configurations {
  testJars
}

artifacts {
  testJars pactsJar
}

dependencies {
  compile project(path: ":pact-jvm-support", configuration: 'default'), 
    project(path: ":pact-jvm-pact-broker", configuration: 'default')
  compile 'com.github.zafarkhaja:java-semver:0.9.0'
  implementation 'com.amazonaws:aws-java-sdk-s3:1.11.587'
  compile 'org.apache.commons:commons-collections4:4.1'
  compile 'com.github.mifmif:generex:1.0.2'
  compile 'javax.mail:mail:1.5.0-b01'
  compile "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
  implementation 'org.slf4j:slf4j-api:1.7.26'
  implementation "com.google.code.gson:gson:${project.gsonVersion}"
  implementation 'com.github.salomonbrys.kotson:kotson:2.5.0'

  testCompile "ch.qos.logback:logback-classic:${project.logbackVersion}"
  testCompile "org.codehaus.groovy.modules.http-builder:http-builder:${project.httpBuilderVersion}"
  testRuntime project(path: project.path, configuration: 'testJars')
  testCompile "org.codehaus.groovy:groovy-datetime:${project.groovyVersion}"
  testCompile 'io.kotlintest:kotlintest:2.0.7'

}

compileGroovy {
  classpath = classpath.plus(files(compileKotlin.destinationDir))
  dependsOn compileKotlin
}

install.repositories.mavenInstaller.pom.withXml {
  Node pomNode = asNode()
  pomNode.dependencies.'*'.findAll() {
    it.classifier.text() == 'test-pacts'
  }.each() {
    it.parent().remove(it)
  }
}
