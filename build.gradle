buildscript {
  repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
  }
  dependencies {
    classpath 'org.apache.commons:commons-text:1.5'
  }
}

plugins {
  id 'org.jetbrains.kotlin.jvm' version '1.3.71'
  id 'org.jmailen.kotlinter' version '2.3.2'
  id 'io.gitlab.arturbosch.detekt' version '1.0.0-RC14'
  id 'org.jetbrains.dokka' version '0.10.0'
  id 'com.github.johnrengelman.shadow' version '5.0.0' apply false
}

import org.apache.commons.text.StringEscapeUtils

allprojects {
  apply plugin: 'maven-publish'
  if (System.env.TRAVIS != 'true') {
    apply plugin: 'signing'
  }

  group = 'au.com.dius'
  version = '4.0.11'

  repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
  }

  targetCompatibility = '1.8'
  sourceCompatibility = '1.8'
}

subprojects {

  if (name in ['core', 'consumer', 'provider']) {
    return
  }
  
  buildscript {
    repositories {
      jcenter()
      mavenCentral()
      mavenLocal()
    }
  }

  configurations {
    groovyDoc
  }


  apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'codenarc'
    apply plugin: 'jacoco'
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'org.jmailen.kotlinter'
    apply plugin: 'io.gitlab.arturbosch.detekt'
    apply plugin: 'org.jetbrains.dokka'

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    compileTestGroovy {
      classpath = classpath.plus(files(compileTestKotlin.destinationDir))
      dependsOn compileTestKotlin
    }

    tasks.withType(GroovyCompile) {
      groovyOptions.optimizationOptions.indy = true
    }

    tasks.withType(Groovydoc) {
      groovyClasspath = project.configurations.groovyDoc
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
      kotlinOptions {
        jvmTarget = "1.8"
      }
    }

    task dokkaJavadoc(type: org.jetbrains.dokka.gradle.DokkaTask) {
      if (JavaVersion.current().java9Compatible) {
        enabled = false
      }
      outputFormat = 'javadoc'
      outputDirectory = "$buildDir/docs/dokkaJavadoc"
    }

    jar {
        manifest {
          attributes provider: 'gradle',
            'Implementation-Title': project.name, 'Implementation-Version': version,
            'Implementation-Vendor': project.group, 'Implementation-Vendor-Id': project.group,
            'Specification-Vendor': project.group,
            'Specification-Title': project.name,
            'Specification-Version': version,
            'Automatic-Module-Name': project.group + "." + project.name.replaceAll('-', '_')
        }
    }

    task javadocJar(type: Jar, dependsOn: [javadoc, groovydoc, dokkaJavadoc]) {
      archiveClassifier = 'javadoc'
      from javadoc.destinationDir, groovydoc.destinationDir, dokkaJavadoc.outputDirectory
    }

    task sourceJar(type: Jar) {
      archiveClassifier = 'sources'
      from sourceSets.main.allSource
    }

  test {
    useJUnitPlatform()

    if (System.env.TRAVIS == 'true') {
      testLogging {
        exceptionFormat "full"
        showCauses true
        showExceptions true
        showStackTraces true
        showStandardStreams false
        events "passed", "skipped", "failed" //, "standardOut", "standardError"
      }
    } else {
      // Show test results.
      testLogging {
        events "passed", "skipped", "failed"
      }
    }
  }

  publishing {
    publications {
      mavenPublication(MavenPublication) {
        from components.java
        artifact sourceJar
        artifact javadocJar
        pom {
          name = project.name
          description = StringEscapeUtils.escapeXml11(new File(projectDir, 'README.md').text)
          url = 'https://github.com/DiUS/pact-jvm'
          licenses {
            license {
              name = 'Apache 2'
              url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              distribution = 'repo'
            }
          }
          scm {
            url = 'https://github.com/DiUS/pact-jvm'
            connection = 'https://github.com/DiUS/pact-jvm.git'
          }

          developers {
            developer {
              id = 'thetrav'
              name = 'Travis Dixon'
              email = 'the.trav@gmail.com'
            }
            developer {
              id = 'rholshausen'
              name = 'Ronald Holshausen'
              email = 'rholshausen@dius.com.au'
            }
          }
        }
      }
    }
    repositories {
      maven {
        url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
        if (project.hasProperty('sonatypeUsername')) {
          credentials {
            username sonatypeUsername
            password sonatypePassword
          }
        }
      }
    }
  }

  if (System.env.TRAVIS != 'true') {
    signing {
      sign publishing.publications.mavenPublication
    }
  }

    codenarcMain {
        configFile = rootProject.file('config/codenarc/ruleset.groovy')
    }

    codenarcTest {
        configFile = rootProject.file('config/codenarc/rulesetTest.groovy')
    }

    check.dependsOn << 'jacocoTestReport'

  kotlinter {
    indentSize = 2
    reporters = ['checkstyle', 'plain', 'json']
  }

  detekt {
    failFast = false
    config = files(rootProject.file("config/detekt-config.yml"))
  }

  task allDeps(type: DependencyReportTask) {}
}

if (System.env.TRAVIS == 'true') {
    allprojects {
        tasks.withType(GroovyCompile) {
            groovyOptions.fork = false
        }
        tasks.withType(Test) {
            minHeapSize = '128m'
            maxHeapSize = '768m'
        }
    }
}
